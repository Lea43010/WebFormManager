from sqlalchemy import create_engine, inspect
import pandas as pd
from datetime import datetime

# --- KONFIGURATION ---

# Deine Datenbankverbindung
db_user = "dein_user"
db_password = "dein_passwort"
db_host = "dein_host"  # Beispiel: db.somedomain.com
db_port = "5432"
db_name = "deine_db"

# Verbindung bauen
DATABASE_URL = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"

# --- REGELN DEFINIEREN ---
rules = [
    {"check": "lowercase_tablenames"},
    {"check": "snake_case_columns"},
    {"check": "non_nullable_ids"}
]

# --- IMPLEMENTIERUNG ---

class DataQualityChecker:
    def __init__(self, engine):
        self.engine = engine
        self.inspector = inspect(engine)
        self.issues = []

    def run_checks(self, rules):
        tables = self.inspector.get_table_names(schema='public')
        
        # Regel 1: Tabellen-Namen prÃ¼fen
        if any(rule['check'] == "lowercase_tablenames" for rule in rules):
            invalid_tables = [t for t in tables if not t.islower() or " " in t]
            if invalid_tables:
                self.issues.append(("UngÃ¼ltige Tabellennamen", invalid_tables))
        
        # Regel 2 und 3: Spalten prÃ¼fen
        for table in tables:
            columns = self.inspector.get_columns(table, schema='public')
            df = pd.DataFrame(columns)

            if any(rule['check'] == "snake_case_columns" for rule in rules):
                invalid_columns = df[df['name'].str.contains(r'[A-Z\s]')]
                if not invalid_columns.empty:
                    self.issues.append((f"UngÃ¼ltige Spaltennamen in {table}", invalid_columns['name'].tolist()))

            if any(rule['check'] == "non_nullable_ids" for rule in rules):
                nullable_ids = df[(df['name'].str.endswith('id')) & (df['nullable'] == True)]
                if not nullable_ids.empty:
                    self.issues.append((f"ID-Spalten dÃ¼rfen NULL sein in {table}", nullable_ids['name'].tolist()))
    
    def print_report(self):
        if not self.issues:
            print("âœ… Alle Checks bestanden!")
        else:
            print("ðŸš¨ Data Quality Probleme gefunden:")
            for issue, details in self.issues:
                print(f"\n- {issue}: {details}")
    
    def generate_html_report(self, filename="data_quality_report.html"):
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        html = f"""
        <html>
        <head>
            <title>Data Quality Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                h1 {{ color: #4CAF50; }}
                h2 {{ color: #f44336; }}
                .issue {{ margin-bottom: 20px; }}
                .timestamp {{ font-size: 12px; color: grey; }}
                .ok {{ color: #4CAF50; }}
            </style>
        </head>
        <body>
            <h1>Data Quality Report</h1>
            <div class="timestamp">Erstellt am {now}</div>
        """

        if not self.issues:
            html += "<h2 class='ok'>âœ… Alle Checks bestanden!</h2>"
        else:
            html += "<h2>ðŸš¨ Probleme gefunden:</h2>"
            for issue, details in self.issues:
                html += f"<div class='issue'><strong>{issue}</strong><ul>"
                for d in details:
                    html += f"<li>{d}</li>"
                html += "</ul></div>"

        html += """
        </body>
        </html>
        """

        with open(filename, "w", encoding="utf-8") as f:
            f.write(html)
        
        print(f"ðŸ“„ HTML Report generiert: {filename}")

# --- AUSFÃœHRUNG ---

def main():
    engine = create_engine(DATABASE_URL)
    checker = DataQualityChecker(engine)
    checker.run_checks(rules)
    checker.print_report()
    checker.generate_html_report()
    engine.dispose()

if __name__ == "__main__":
    main()
